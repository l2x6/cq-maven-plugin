/**
 * Copyright (c) 2020 CQ Maven Plugin
 * project contributors as indicated by the @author tags.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.l2x6.cq.maven.prod;

import java.io.File;
import java.nio.charset.Charset;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import org.apache.maven.model.Dependency;
import org.apache.maven.model.Model;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.plugins.annotations.Component;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.eclipse.aether.RepositorySystem;
import org.eclipse.aether.RepositorySystemSession;
import org.eclipse.aether.repository.RemoteRepository;
import org.l2x6.cq.common.CqCommonUtils;
import org.l2x6.pom.tuner.PomTransformer;
import org.l2x6.pom.tuner.PomTransformer.ContainerElement;
import org.l2x6.pom.tuner.PomTransformer.NodeGavtcs;
import org.l2x6.pom.tuner.PomTransformer.SimpleElementWhitespace;
import org.l2x6.pom.tuner.PomTransformer.Transformation;
import org.l2x6.pom.tuner.PomTransformer.TransformationContext;
import org.l2x6.pom.tuner.model.Ga;
import org.l2x6.pom.tuner.model.Gav;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

/**
 * Postprocess BOMs generated by {@code quarkus-platform-bom-maven-plugin} by removing {@code redhat} suffixes from
 * artifacts where they are not necessary. This is meant to be a temporary solution until
 * {@code quarkus-platform-bom-maven-plugin} implements a similar functionality.
 *
 * @since 2.32.0
 */
@Mojo(name = "reduce-generated-platform-boms", threadSafe = true, requiresProject = false, inheritByDefault = false)
public class ReduceGeneratedPlatformBomsMojo extends AbstractMojo {

    private final static Pattern PROD_VERSION_PATTERN = Pattern.compile("[\\.\\-]redhat-\\d\\d\\d\\d\\d");

    /**
     * The basedir
     *
     * @since 2.32.0
     */
    @Parameter(property = "cq.basedir", defaultValue = "${project.basedir}")
    File basedir;

    /**
     * Encoding to read and write files in the current source tree
     *
     * @since 2.32.0
     */
    @Parameter(defaultValue = "utf-8", required = true, property = "cq.encoding")
    String encoding;
    Charset charset;

    /**
     * How to format simple XML elements ({@code <elem/>}) - with or without space before the slash.
     *
     * @since 2.32.0
     */
    @Parameter(property = "cq.simpleElementWhitespace", defaultValue = "SPACE")
    SimpleElementWhitespace simpleElementWhitespace;

    /**
     * Skip the execution of this mojo.
     *
     * @since 2.32.0
     */
    @Parameter(property = "cq.fix-platform-config.skip", defaultValue = "false")
    boolean skip;

    /**
     * Quarkus platform members configuration. Basically a workaround for not having to bother with resolving
     * placeholders in {@code quarkus-platform-bom-maven-plugin}'s bom config.
     *
     * @since 2.32.0
     */
    @Parameter
    List<MemberConfig> members;
    Map<String, MemberConfig> memberMap = new TreeMap<>();

    /**
     * @since 2.32.0
     */
    @Parameter(defaultValue = "${settings.localRepository}", readonly = true)
    String localRepository;

    /**
     * @since 2.32.0
     */
    @Parameter(defaultValue = "${project.remoteProjectRepositories}", readonly = true, required = true)
    List<RemoteRepository> repositories;

    @Component
    private RepositorySystem repoSystem;

    @Parameter(defaultValue = "${repositorySystemSession}", readonly = true, required = true)
    private RepositorySystemSession repoSession;

    @Override
    public void execute() throws MojoExecutionException, MojoFailureException {
        if (members != null) {
            members.forEach(m -> memberMap.put(m.getName(), m));
        }

        charset = Charset.forName(encoding);

        new PomTransformer(basedir.toPath().resolve("pom.xml"), charset, simpleElementWhitespace).transform(fixHiddenMembers());

    }

    Transformation fixHiddenMembers() {
        return (Document document, TransformationContext context) -> {
            final ContainerElement platformConfig = context.getProfileParent(null).get()
                    .getChildContainerElement("build", "plugins").get()
                    .childElementsStream()
                    .map(ContainerElement::asGavtcs)
                    .filter(gavtcs -> gavtcs.getArtifactId().equals("quarkus-platform-bom-maven-plugin"))
                    .findFirst().get().getNode()
                    .getChildContainerElement("configuration", "platformConfig").get();

            final Map<String, Member> mainContextMembers = new TreeMap<>();
            platformConfig.getChildContainerElement("members").get().childElementsStream()
                    .map(elem -> new Member(null, null, elem, basedir.toPath(), charset))
                    .forEach(m -> mainContextMembers.put(m.name, m));

            final ContainerElement prodPlatformConfig = context.getProfileParent("rhproduct").get()
                    .getChildContainerElement("build", "plugins").get()
                    .childElementsStream()
                    .map(ContainerElement::asGavtcs)
                    .filter(gavtcs -> gavtcs.getArtifactId().equals("quarkus-platform-bom-maven-plugin"))
                    .findFirst().get().getNode()
                    .getChildContainerElement("configuration", "platformConfig").get();
            final List<Member> generatorMembers = prodPlatformConfig.getChildContainerElement("members").get()
                    .childElementsStream()
                    .map(elem -> new Member(mainContextMembers, memberMap, elem, basedir.toPath(), charset))
                    .collect(Collectors.toList());

            final Set<Ga> prodGasRequiredBySupportedMembers = new TreeSet<>();
            Stream.concat(
                    new MemberBom(basedir.toPath().resolve("generated-platform-project/quarkus/bom/pom.xml"),
                            charset).getProdConstraints().stream(),
                    generatorMembers.stream()
                            .filter(member -> !member.isHidden())
                            .map(Member::getEffectiveProdConstraints)
                            .flatMap(Set::stream))
                    .forEach(prodGasRequiredBySupportedMembers::add);
            final Set<Ga> prodGasNotRequiredBySupportedMembers = new TreeSet<>();
            final Path universeBomPath = basedir.toPath().resolve("generated-platform-project/quarkus-universe/bom/pom.xml");
            new MemberBom(universeBomPath, charset)
                    .getProdConstraints().stream()
                    .filter(ga -> !ga.getArtifactId().contains("-bom-quarkus-platform-"))
                    .filter(ga -> !prodGasRequiredBySupportedMembers.contains(ga))
                    .forEach(prodGasNotRequiredBySupportedMembers::add);

            generatorMembers.stream()
                    .filter(member -> member.isHidden() || member.getMemberBom() != null)
                    .forEach(member -> {

                        new PomTransformer(member.getGeneratedBomPath(), charset, simpleElementWhitespace)
                                .transform(removeSuffix(prodGasNotRequiredBySupportedMembers, PROD_VERSION_PATTERN));

                    });

            new PomTransformer(universeBomPath, charset, simpleElementWhitespace)
                    .transform(removeSuffix(prodGasNotRequiredBySupportedMembers, PROD_VERSION_PATTERN));

        };
    }

    public Transformation removeSuffix(Collection<Ga> gas, Pattern pattern) {
        return (Document document, TransformationContext context) -> {
            final ContainerElement profileParent = context.getProfileParent(null).get();
            final ContainerElement dependencyManagementDeps = profileParent
                    .getChildContainerElement("dependencyManagement").orElseThrow(
                            () -> new IllegalStateException("dependencyManagement not found in " + context.getPomXmlPath()))
                    .getChildContainerElement("dependencies").orElseThrow(
                            () -> new IllegalStateException(
                                    "dependencyManagement/dependencies not found in "
                                            + context.getPomXmlPath()));

            getLog().info("Version replacements in " + basedir.toPath().relativize(context.getPomXmlPath()) + ":");
            for (ContainerElement dep : dependencyManagementDeps.childElements()) {
                final NodeGavtcs gav = dep.asGavtcs();
                final Ga ga = gav.toGa();
                if (gas.contains(ga)) {
                    final String oldVersion = gav.getVersion();
                    final String newVersion = pattern.matcher(oldVersion).replaceFirst("");
                    getLog().info(" - " + ga + ":" + oldVersion + " -> " + newVersion);
                    dep.setVersion(newVersion);
                }
            }
        };
    }

    static Ga toGa(Dependency dep) {
        return new Ga(dep.getGroupId(), dep.getArtifactId());
    }

    static Gav toNonProdGav(Dependency dep) {
        return new Gav(dep.getGroupId(), dep.getArtifactId(), PROD_VERSION_PATTERN.matcher(dep.getVersion()).replaceAll(""));
    }

    static class MemberBom {
        private final Set<Ga> prodConstraints;
        private final Model model;

        public MemberBom(Path bomPath, Charset charset) {
            this.model = CqCommonUtils.readPom(bomPath, charset);
            this.prodConstraints = model.getDependencyManagement()
                    .getDependencies()
                    .stream()
                    .filter(dep -> dep.getVersion().contains("redhat-"))
                    .map(ReduceGeneratedPlatformBomsMojo::toGa)
                    .collect(Collectors.toCollection(TreeSet::new));
        }

        public Set<Ga> getProdConstraints() {
            return prodConstraints;
        }

        public List<Dependency> getConstraints() {
            return model.getDependencyManagement().getDependencies();
        }

    }

    public static class MemberConfig {
        private String name;
        private String bom;

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getBom() {
            return bom;
        }

        public void setBom(String bom) {
            this.bom = bom;
        }
    }

    class Member {
        private final ContainerElement node;
        private final boolean hidden;
        private final String key;
        private MemberBom generatedBom;
        private MemberBom memberBom;
        private final String name;
        private final Path basePath;
        private final Charset charset;
        private final MemberConfig memberConfig;

        public Member(Map<String, Member> mainContextMembers, Map<String, MemberConfig> memberConfigs, ContainerElement node,
                Path basePath, Charset charset) {
            this.basePath = basePath;
            this.charset = charset;
            this.node = node;
            this.hidden = node.getChildContainerElement("hidden")
                    .map(el -> el.getNode())
                    .filter(n -> n != null)
                    .map(Element::getTextContent)
                    .map(Boolean::parseBoolean).orElse(false);
            this.name = node.getChildContainerElement("name").get().getNode().getTextContent();

            final Member parent = mainContextMembers != null ? mainContextMembers.get(name) : null;
            this.key = parent != null ? parent.key : node.getChildContainerElement("release")
                    .orElseThrow(
                            () -> new IllegalStateException(
                                    "No <release> element under member config having name '" + name + "'"))
                    .getChildContainerElement("next")
                    .orElseThrow(
                            () -> new IllegalStateException("No <next> element under member config having name '" + name + "'"))
                    .getNode()
                    .getTextContent().split(":")[1].replace("-bom", "").replace("quarkus-hazelcast-client",
                            "quarkus-hazelcast");
            this.memberConfig = memberConfigs == null ? null : memberConfigs.get(name);
        }

        public boolean isHidden() {
            return hidden;
        }

        public ContainerElement getNode() {
            return node;
        }

        public String getKey() {
            return key;
        }

        public Path getGeneratedBomPath() {
            return basePath.resolve("generated-platform-project/" + key + "/bom/pom.xml");
        }

        public MemberBom getGeneratedBom() {
            if (this.generatedBom == null) {
                this.generatedBom = new MemberBom(getGeneratedBomPath(), charset);
            }
            return generatedBom;
        }

        public MemberBom getMemberBom() {
            if (memberConfig == null || memberConfig.getBom() == null) {
                return null;
            }

            if (this.memberBom == null) {
                final String[] gav = memberConfig.getBom().split(":");
                final Path bomPath = CqCommonUtils.resolveArtifact(
                        Paths.get(localRepository),
                        gav[0],
                        gav[1],
                        gav[2],
                        "pom",
                        repositories,
                        repoSystem,
                        repoSession);

                this.memberBom = new MemberBom(bomPath, charset);
            }

            return memberBom;
        }

        public Set<Ga> getEffectiveProdConstraints() {
            MemberBom bom = getMemberBom();
            if (bom == null) {
                bom = getGeneratedBom();
            }
            return bom.getProdConstraints();
        }

        public MemberConfig getMemberConfig() {
            return memberConfig;
        }

    }

}
